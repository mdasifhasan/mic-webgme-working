/**
* Created by AH on 11/24/2016.
*/

// ************ Fields ************  //

var Field = function (name) {
this.name = name;
this.interfaces = {};
};

Field.prototype.addInterface = function (name) {
this.interfaces[name] = [];
return this;
};

Field.prototype.removeInterface = function (name) {
delete this.childs[name];
return this;
};

Field.prototype.subscribeToInterface = function (name, fn) {
if (!(name in this.interfaces))
this.addInterface(name);
this.interfaces[name].push(fn);
return this;
};

Field.prototype.unsubscribeFromInterface = function (name, fn) {
if (!(name in this.interfaces))
return;
this.interfaces[name].splice(this.interfaces[name].indexOf(fn), 1);
return this;
};

Field.prototype.triggerAction = function (name, args) {
console.log("Firing field action: ", name);
if (!(name in this.interfaces))
return;
//console.log("Found field action: ", this.interfaces[name], " would Call with args:", args);
var i,
res = true;
for (i = 0; i < this.interfaces[name].length; i++) {
//console.log("calling function: ", this.interfaces[name][i]);
res = res && this.interfaces[name][i](args);
}
return res;
};

// end of fields constructs



// generated code
<%if("Fields" in sim)parseFields(sim.Fields, "Fields.")%>

<%function parseFields(field, prefix){
    for (var k in field){%>
<%-prefix%><%-k%> = new Field('<%-k%>');<%if("Fields" in field[k])parseFields(field[k].Fields, prefix+k+".");
    if("Actions" in field[k])parseActions(field[k].Actions, prefix+k+".");
    }
}%>
// end of generated code

<%function parseActions(actions, prefix){
        for (var k in actions){
            var retString = parseActionParams(actions[k]);
            if(retString === null)
                retString = "";
            var fnName = k.replace(/\s/g, '');
%>
<%-prefix%><%-fnName%> = function(<%-retString%>){<%parseActionBodyForParam(actions[k])%>
    return this.triggerAction('<%-fnName%>', <%-retString%>);
};<%
}}%>

<%function parseActionParams(action){
    var retString = null;
    if("Data" in action) {
        var i = 0;
        for(; i < action.Data.length; i++){
            var d = action.Data[i];
            var dName = d.name;
            if(retString === null)
                retString = dName.replace(/\s/g, '');
            else
                retString += ", " + dName.replace(/\s/g, '');
        }
    }
    if("ActionSignals" in action) {
        var i = 0;
        for(; i < action.ActionSignals.length; i++){
            var d = action.ActionSignals[i];
            var dName = "signal_" + d;
            if(retString === null)
                retString = dName.replace(/\s/g, '');
            else
                retString += ", " + dName.replace(/\s/g, '');
        }
    }
    return retString;
}%>


<%function parseActionBodyForParam(action){
    if("Data" in action) {
        var i = 0;
        for(; i < action.Data.length; i++){
            var d = action.Data[i];
            var dName = d.name.replace(/\s/g, '');
            var dType = d.type;
            if(dType !== null){
                dType = dType.replace('DataTypes.','')

    %>
    if(!(<%-dName%> instanceof <%-dType%>)){
        throw {name:"Bad Parameter", message: "<%-dName%> is not instance of <%-dType%>"};
    }<%}}
    }
    if("ActionSignals" in action) {
        var i = 0;
    for(; i < action.ActionSignals.length; i++){
        var d = action.ActionSignals[i];
        var dName = "signal_" + d;
        var dType = "Signal";
    %>
    if(!(<%-dName%> instanceof <%-dType%>)){
        throw {name:"Bad Parameter", message: "<%-dName%> is not instance of <%-dType%>"};
    }<%}
    }
}%>




