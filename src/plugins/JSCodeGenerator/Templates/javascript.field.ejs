// ************ Fields ************  //

var Field = function (name) {
this.name = name;
this.interfaces = {};
this.data = {};
this.signals = new Signals();
};

Field.prototype.addData = function (name) {
this.data[name] = [];
return this;
};

Field.prototype.removeData = function (name) {
delete this.data[name];
return this;
};

Field.prototype.subscribeData = function (name, data) {
if (!(name in this.data))
this.addData(name);
this.data[name].push(data);
return this;
};

Field.prototype.unsubscribeData = function (name, data) {
if (!(name in this.data))
return;
this.data[name].splice(this.data[name].indexOf(data), 1);
return this;
};

Field.prototype.getData =function(name, mode){
if (!(name in this.data))
return;
if(mode === null || mode === "all")
return this.data[name];
else if(mode === "first")
return this.data[name][0];
else if(mode === "random")
return this.data[name][Math.floor(Math.random() * this.data[name].length)];
else
return this.data[name];
};

Field.prototype.addInterface = function (name) {
this.interfaces[name] = [];
return this;
};

Field.prototype.removeInterface = function (name) {
delete this.interfaces[name];
return this;
};

Field.prototype.subscribeToInterface = function (name, fn) {
if (!(name in this.interfaces))
this.addInterface(name);
this.interfaces[name].push(fn);
return this;
};

Field.prototype.unsubscribeFromInterface = function (name, fn) {
if (!(name in this.interfaces))
return;
this.interfaces[name].splice(this.interfaces[name].indexOf(fn), 1);
return this;
};

Field.prototype.triggerAction = function () {
//console.log("Firing field action rcvd arguments", arguments);
var name = arguments[0];
var args = Array.prototype.slice.call(arguments, 1);
//console.log("Firing field action: ", name);
if (!(name in this.interfaces)){
//console.log("No component subscribed to the interface: ", name, "of", this);
return true;
}
//console.log("Found field action: ", this.interfaces[name], " would Call with args:", args);
var i,
res = true;
for (i = 0; i < this.interfaces[name].length; i++) {
//console.log("calling function: ", this.interfaces[name][i], "with args:", args);
res = res && this.interfaces[name][i].apply(this, args);
}
return res;
};

var ReferFieldData = function (field, fieldDataName) {
this.field = field;
this.fieldDataName = fieldDataName;
};
ReferFieldData.prototype.first = function () {
return this.field.getData(this.fieldDataName, "first");
};
ReferFieldData.prototype.random = function () {
return this.field.getData(this.fieldDataName, "random");
};
ReferFieldData.prototype.all = function () {
return this.field.getData(this.fieldDataName);
};


// generated code
var Fields = {};
<%if("Fields" in sim)parseFields(sim.Fields, "Fields.")%>

<%function parseFields(field, prefix){
    for (var k in field){%>
<%-prefix%><%-k%> = new Field('<%-k%>');<%if("Fields" in field[k])parseFields(field[k].Fields, prefix+k+".");
    if("Actions" in field[k])parseActions(field[k].Actions, prefix+k+".");
    if("FieldData" in field[k])parseFieldData(field[k].FieldData, prefix+k);
    }
}%>
// end of generated code

<%function parseFieldData(fieldData, field){
    var retString = null;
    for(var d in fieldData){
        var dName = d.replace(/\s/g, '').replace("-", "_");%>
<%-field%>.<%-dName%> = new ReferFieldData(<%-field%>, '<%-dName%>');
    <%
    }
    return retString;
}%>

<%function parseActions(actions, prefix){
        for (var k in actions){
            var retString = parseActionParams(actions[k]);
            if(retString === null)
                retString = "";
            var fnName = k.replace(/\s/g, '').replace("-", "_");
%>
<%-prefix%><%-fnName%> = function(<%-retString%>){<%parseActionBodyForParam(actions[k])
    if(retString !== ""){
%>
    return this.triggerAction('<%-fnName%>', <%-retString%>);
};<%}else{
%>
    return this.triggerAction('<%-fnName%>');
};<%
}}}%>

<%function parseActionParams(action){
    var retString = null;
    if("Data" in action) {
        var i = 0;
        for(; i < action.Data.length; i++){
            var d = action.Data[i];
            var dName = "data_" + d.name;
            if(retString === null)
                retString = dName.replace(/\s/g, '').replace("-", "_");
            else
                retString += ", " + dName.replace(/\s/g, '').replace("-", "_");
        }
    }
    if("FieldData" in action) {
        var i = 0;
        for(; i < action.FieldData.length; i++){
            var d = action.FieldData[i];
            var dName = "fd_" + d.name;
            if(retString === null)
                retString = dName.replace(/\s/g, '').replace("-", "_");
            else
                retString += ", " + dName.replace(/\s/g, '').replace("-", "_");
        }
    }
    if("ActionSignals" in action) {
        var i = 0;
        for(; i < action.ActionSignals.length; i++){
            var d = action.ActionSignals[i];
            var dName = "signal_" + d;
            if(retString === null)
                retString = dName.replace(/\s/g, '').replace("-", "_");
            else
                retString += ", " + dName.replace(/\s/g, '').replace("-", "_");
        }
    }
    return retString;
}%>


<%function parseActionBodyForParam(action){
    if("Data" in action) {
        var i = 0;
        for(; i < action.Data.length; i++){
            var d = action.Data[i];
            var dName = "data_" + d.name.replace(/\s/g, '').replace("-", "_");
            var dType = d.type;
            if(dType !== null){
                dType = dType.replace('DataTypes.','')

    %>
    if(<%-dName%> && !(<%-dName%> instanceof <%-dType%>)){
        throw {name:"Bad Parameter", message: "<%-dName%> is not instance of <%-dType%>"};
    }<%}}
    }
    if("FieldData" in action) {
        var i = 0;
        for(; i < action.FieldData.length; i++){
            var d = action.FieldData[i];
            var dName = "fd_" + d.name.replace(/\s/g, '').replace("-", "_");
            var dType = "ReferFieldData";
    %>
    if(<%-dName%> && !(<%-dName%> instanceof <%-dType%>)){
        throw {name:"Bad Parameter", message: "<%-dName%> is not instance of <%-dType%>"};
    }<%}
    }
    if("ActionSignals" in action) {
        var i = 0;
    for(; i < action.ActionSignals.length; i++){
        var d = action.ActionSignals[i];
        var dName = "signal_" + d;
        var dType = "Signal";
    %>
    if(<%-dName%> && !(<%-dName%> instanceof <%-dType%>)){
        throw {name:"Bad Parameter", message: "<%-dName%> is not instance of <%-dType%>"};
    }<%}
    }
}%>




