// generated code
<%if("Agents" in sim)parseAgents(sim.Agents)%>

// end of generated code

<%
function parseAgents(agents) {
    for(var k in agents){
        parseAgent(agents[k], "");
    }
};
%>

<%
function parseAgent(agent, prefix) {
var name = agent.name.replace(/\s/g, '').replace("-", "_");
%>
<%if (prefix === ""){
%>var <%-name%> = function (name) {<%
}else{
%><%-prefix%><%-name%> = function (name) {<%
}
%>
    if(!name)
        name = "<%-name%>";
    Agent.apply(this, [name]);
    this.signals = new Signals();
    <%parseAgentData(agent, true, "this")%><%
    if("childs" in agent){%>
    var child = null;<%
        for (var c in agent.childs){
            var ca = agent.childs[c];
            var cname = ca.name.replace(/\s/g, '').replace("-", "_");
            var cbase = ca.base.replace(/\s/g, '').replace("-", "_");
    %>
    var child = new <%-cbase%>('<%-cname%>');
    this.addChild(child);
    <%parseChildData(ca, "child")%><%
}
}
parseCourses(agent, "this", true);
parseModules(agent);
parseModuleBindings(agent);
//end of childs agents%>
};<%
if (prefix === ""){%>
inheritsFrom(<%-name%>, Agent);<%
}else{%>
inheritsFrom(<%-prefix%><%-name%>, Agent);<%}
parseCourseActions(agent, prefix+name);
if("libraryAgents" in agent){%>
<%-prefix + name%>.library = {};<%
    for (var k in agent.libraryAgents){
        var la = agent.libraryAgents[k];
%><%-parseAgent(la, prefix + name + ".library.")%><%
}
} //end of library agents
}
%>

<% function parseChildData(agent, prefix){
    parseAgentData(agent, false,prefix);
    if("childs" in agent)
        for (var c in agent.childs)
            parseChildData(agent.childs[c], prefix + ".childs['"+c+"']");
}
%>

<% function parseData(data, prefix){
    type = data.type;
if(type === "Number" || type === "Boolean"){
    var value = data.value;%><%-prefix%>.value = <%=value%>;<%}
else if (type === "Text"){
    var value = data.value;%><%-prefix%>.value = '<%-value%>';<%}
else if (type === "ReferData"){
    var referValue = data.value;
    var dataType = data.dataType;%><%-prefix%>.referValue = <%=referValue%>;<%}
else if (type === "Object"){
    var value = data.value;
    var objType = data.objType;%><%-prefix%>.value = <%=value%>;<%}
else if (type === "Data"){
    var values = data.value;
        for (var k in values){%>
    <%parseData(values[k], prefix +"['"+k+"']")
}
}
}%>


<%
function parseAgentData(agent, isCreateInstance, prefix){
if("Data" in agent){
    if(isCreateInstance){
%>
    <%-prefix%>.data = {};<%}
for (var d in agent.Data){
    var data = agent.Data[d];
    type = data.type;
    var name = data.name;
    if(type === "Data"){
        var base = data.base;
        var values = data.value
    if(isCreateInstance){%>
    <%-prefix%>.data['<%=name%>'] = new <%=base%>();
    <%}
    for (var k in values){
        parseData(values[k], prefix + ".data['"+name+"']"+"['"+k+"']")%>
<%}%>
<%}%>
<%}
}
}%>


<%function parseCourses(agent, ownerVarName, isCreateCourseInstance){
if("Courses" in agent){
%>var course;<%
  for (var c in agent.Courses){
        var cs = agent.Courses[c];
        var name = c;
      var courseAction = "courseAction" in cs ? cs.courseAction?"CA_"+cs.courseAction.replace(/\s/g, '').replace("-", "_"):null : null;
        if(isCreateCourseInstance){
            if(courseAction){
%>
    course = new Course(this, "<%-name%>", null, new this.<%-courseAction%>(this));
<%}else{%>
    course = new Course(this, "<%-name%>");<%}%>
    <%-ownerVarName%>.addCourse(course);
    <%
            if("childs" in cs){
                for(var i = 0; i < cs.childs.length; i++){
                    var child = cs.childs[i];
                    parseChildCourses(ownerVarName, child, ownerVarName+".courses['"+name+"']");
                }
            }
    }else{%>
    course = <%-ownerVarName%>.courses['<%-name%>'];<%}
    if("signals" in cs){
        for(var i = 0; i < cs.signals.length; i++){
            var signal = cs.signals[i];
            var path = signal.path;
            if(signal.type === "Field"){
                var signalPath = signal.path.substr(0, signal.path.length-signal.name.length-1);%>
    <%-signalPath%>.signals.subscribeSignal('<%-signal.name%>', this.courses['<%-name%>']);<%
            }else if(signal.type === "local"){
                var signalPath = signal.path.substr("AgentSignals".length); %>
    <%-ownerVarName%>.signals.subscribeSignal('<%-signal.name%>', this.courses['<%-name%>']);<%
            }
        }
    }//end of signals
}%>
<%}
}%>


<%function parseChildCourses(owner, child, prefix) {
        var name = child.name;
        var type = child.type;
        var courseAction = "courseAction" in child ? child.courseAction?"CA_"+child.courseAction.replace(/\s/g, '').replace("-", "_"):null : null;
        if(courseAction){
    %>
    course = new Course(this, "<%-name%>", null, new this.<%-courseAction%>(this));
    <%}else{%>
    course = new Course(this, "<%-name%>");<%}%>
    <%-prefix%>.addCourse(course);
<%
    if("childs" in child){
        for(var i = 0; i < child.childs.length; i++){
            var ch = child.childs[i];
            parseChildCourses(owner, ch, prefix+ ".childs['" + name + "']");
        }
    }
}%>



<%function parseCourseActions(agent, prefix) {
   if("CourseActions" in agent){
       for (var ca in agent.CourseActions){
           var cAction = agent.CourseActions[ca];
           var name = ca.replace(/\s/g, '').replace("-", "_");
            var retString = parseActionParams(cAction);
            if(retString === null)
                retString = "";
%>
<%-prefix%>.prototype.CA_<%-name%> = function (self) {
<%parseActionBodyForParam(cAction)%>
<%
    if("fieldActions" in cAction) {%>
    this.res = {};
<%      for (var i = 0; i < cAction.fieldActions.length; i++) {
            var fa = cAction.fieldActions[i];
            faname = fa.name.replace(/\s/g, '').replace("-", "_");
%>
    this.res.<%-faname%> = false;
        <%}
    }
%>
};

<%-prefix%>.prototype.CA_<%-name%>.prototype.trigger = function (course) {
<%
if("fieldActions" in cAction) {
    for (var i = 0; i < cAction.fieldActions.length; i++) {
    var fa = cAction.fieldActions[i];
    var fieldName = fa.field.replace(/\s/g, '').replace("-", "_");
    faname = fa.name.replace(/\s/g, '').replace("-", "_");
    var retString = parseFieldActionParams(fa);
    if(retString === null)
        retString = "";
%>
    if(!this.res.<%-faname%>){
        this.res.<%-faname%> = <%-fieldName%>(<%-retString%>);
        if(!this.res.<%-faname%>)
            return false;
    }
<%}
}
%>
    for(var r in this.res)
        this.res[r] = false;
    return true;
};
<%
       }
   }
}%>

<%function parseActionBodyForParam(action){
if("data" in action) {
    var i = 0;
%>
    this.caData = {};<%
for(var dt in action.data){
    var d = action.data[dt];
    var dName = dt.replace(/\s/g, '').replace("-", "_");
    var dType = d.type;
    var dValue = d.value;
    if(dValue)
        dValue = dValue.replace("Data.", "data.")
if(dType !== null){
    dType = dType.replace('DataTypes.','')
%>
<%}%>
    this.caData.<%-dName%> = self.<%-dValue%>;
<%}
}
if("FieldData" in action) {
for(var dt in action.FieldData){
    var d = action.FieldData[dt];
    var dName = "fd_" + dt.replace(/\s/g, '').replace("-", "_");
    var dType = "ReferFieldData";
    var dValue = d.value;
%>
    this.caData.<%-dName%> = <%-dValue%>;
<%}
}
if("CourseActionSignals" in action) {%>
    this.caSignals = {};<%
for(var cas in action.CourseActionSignals){
    var d = action.CourseActionSignals[cas];
    var dName = cas;
    var dType = "Signal";
    var dSignalPath = null;
    var dSignalName = null;
    var signal = d.Signal;
    if(signal) {
        if (signal.type === 'local') {
            dSignalName = signal.name;
            var spath = signal.path.substr(0, signal.path.length - signal.name.length - 1);
            dSignalPath = "self." + spath.replace("AgentSignals", "signals");
        } else {
            dSignalPath = signal.path.substr(0, signal.path.length - signal.name.length - 1) + ".signals";
            dSignalName = signal.name;
        }

%>
    this.caSignals.<%-dName%> = new Signal(<%-dSignalPath%>, '<%-dSignalName%>');
<%}else{%>
    this.caSignals.<%-dName%> = null;
<%}
}
}
}%>

<%function parseActionParams(action){
    var retString = null;
    if("data" in action) {
        for(var d in action.data){
            var dName = d;
            if(retString === null)
                retString = dName.replace(/\s/g, '').replace("-", "_");
            else
                retString += ", " + dName.replace(/\s/g, '').replace("-", "_");
        }
    }
    if("FieldData" in action) {
        for(var d in action.FieldData){
            var dName = "fd_" + d;
            if(retString === null)
                retString = dName.replace(/\s/g, '').replace("-", "_");
            else
                retString += ", " + dName.replace(/\s/g, '').replace("-", "_");
        }
    }
    if("CourseActionSignals" in action) {
        for(var d in action.CourseActionSignals){
            var dName = "signal_" + d;
            if(retString === null)
                retString = dName.replace(/\s/g, '').replace("-", "_");
            else
                retString += ", " + dName.replace(/\s/g, '').replace("-", "_");
        }
    }
    return retString;
}%>

<%function parseFieldActionParams(action){
    var retString = null;
    if("data" in action) {
        for(var d in action.data){
            var dName = action.data[d].value;
            if(dName)
                dName = "this.caData." + dName;
            else
                dName = "null";
            if(retString === null)
                retString = dName.replace(/\s/g, '').replace("-", "_");
            else
                retString += ", " + dName.replace(/\s/g, '').replace("-", "_");
        }
    }
    if("FieldData" in action) {
        for(var d in action.FieldData){
            var dName = action.FieldData[d].value;
            if(dName)
                dName = "this.caData." + "fd_" + dName;
            else
                dName = "null";
            if(retString === null)
                retString = dName.replace(/\s/g, '').replace("-", "_");
            else
                retString += ", " + dName.replace(/\s/g, '').replace("-", "_");
        }
    }
    if("ActionSignals" in action) {
        for(var d in action.ActionSignals){
            var dName = action.ActionSignals[d].CourseActionSignal;
            if(dName)
                dName = "this.caSignals." + dName;
            else
                dName = "null";
            if(retString === null)
                retString = dName.replace(/\s/g, '').replace("-", "_");
            else
                retString += ", " + dName.replace(/\s/g, '').replace("-", "_");
        }
    }
    return retString;
}%>

<%function parseModules(agent){
    if("Modules" in agent){
        var modules = agent.Modules;
            for(var m in modules){
        var module = modules[m];
        var modName = module.genFileName;
        var signalParams = "";
        if ("signals" in module.init) {
            signalParams = parseSignalParams(module.init.signals);
            if (signalParams === null)
                signalParams = "";
        }
%>
    this.mod_<%-module.name%> = new <%-modName%>();
    this.mod_<%-module.name%>.init(<%-signalParams%>);
    <%}
    }
}%>

<%function parseSignalParams(signals){
    var retString = null;
    for (var d in signals) {
        var dSignalPath = null;
        var dSignalName = null;
        var signal = signals[d];
        if(signal) {
            if (signal.type === 'local') {
                dSignalName = signal.name;
                dSignalPath = "this." + signal.path.replace("AgentSignals", "signals");
            } else {
                dSignalPath = signal.path.substr(0, signal.path.length - signal.name.length - 1) + ".signals";
                dSignalName = signal.name;
            }
        }
        dName = "new Signal(" + dSignalPath+ ", '" + dSignalName +"')";

        if (retString === null)
            retString = dName;
        else
            retString += ", " + dName;
    }
    return retString;
}%>

<%function parseModuleBindings(agent){
if("Bindings" in agent){
    var fieldSubscriptions = agent.Bindings;
        for(var fs in fieldSubscriptions){
    var fieldSubP = fieldSubscriptions[fs];
    for(var f in fieldSubP){
        var fieldSub = fieldSubP[f];
    var dFieldPath = null;
    var dFieldInterfaceName = null;
    if(fieldSub.type === "Action"){
        dFieldPath = fieldSub.fieldAction.substr(0, fieldSub.fieldAction.length - fieldSub.fieldName.length - 1).replace(/\s/g, '').replace("-", "_");
        dFieldInterfaceName = fieldSub.fieldName.replace(/\s/g, '').replace("-", "_");
        var modname =fieldSub.moduleName.replace(/\s/g, '').replace("-", "_");
%>
    <%-dFieldPath%>.subscribeToInterface('<%-dFieldInterfaceName%>', this.mod_<%-modname%>.<%-fieldSub.componentName.replace(/\s/g, '').replace("-", "_")%>.bind(this.mod_<%-modname%>));
<%
    }else if(fieldSub.type === "Data"){
        dFieldPath = fieldSub.fieldData.substr(0, fieldSub.fieldData.length - fieldSub.fieldName.length - 1);
        dFieldInterfaceName = fieldSub.fieldName.replace(/\s/g, '').replace("-", "_");
        var dataPath = fieldSub.data.replace("Data", "data").replace(/\s/g, '').replace("-", "_");
%>
    <%-dFieldPath%>.subscribeData('<%-dFieldInterfaceName%>', this.<%-dataPath%>);
<%
    }
}}
}
}%>