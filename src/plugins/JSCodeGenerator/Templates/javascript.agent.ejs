// generated code
<%if("Agents" in sim)parseAgents(sim.Agents)%>

// end of generated code

<%
function parseAgents(agents) {
    for(var k in agents){
        parseAgent(agents[k], "");
    }
};
%>

<%
function parseAgent(agent, prefix) {
var name = agent.name.replace(/\s/g, '');
%>
<%if (prefix === ""){
%>var <%-name%> = function (name) {<%
}else{
%><%-prefix%><%-name%> = function (name) {<%
}
%>
    if(!name)
        name = "<%-name%>";
    Agent.apply(this, [name]);
    <%parseAgentData(agent, true, "this")%>
    <%parseCourses(agent, "this", true)%><%
    if("childs" in agent){%>
    var child = null;<%
        for (var c in agent.childs){
            var ca = agent.childs[c];
            var cname = ca.name.replace(/\s/g, '');
            var cbase = ca.base.replace(/\s/g, '');
    %>
    var child = new <%-cbase%>('<%-cname%>');
    this.addChild(child);
    <%parseChildData(ca, "child")%>
    <%parseCourses(ca, "child", false)%><%
}
}//end of childs agents%>
};<%
if (prefix === ""){%>
inheritsFrom(<%-name%>, Agent);<%
}else{%>
inheritsFrom(<%-prefix%><%-name%>, Agent);<%}
parseCourseActions(agent, prefix+name);
if("libraryAgents" in agent){%>
<%-prefix + name%>.library = {};<%
    for (var k in agent.libraryAgents){
        var la = agent.libraryAgents[k];
%><%-parseAgent(la, prefix + name + ".library.")%><%
}
} //end of library agents
}
%>

<% function parseChildData(agent, prefix){
    parseAgentData(agent, false,prefix);
    if("childs" in agent)
        for (var c in agent.childs)
            parseChildData(agent.childs[c], prefix + ".childs['"+c+"']");
}
%>

<% function parseData(data, prefix){
    type = data.type;
if(type === "Number" || type === "Boolean"){
    var value = data.value;%><%-prefix%>.value = <%=value%>;<%}
else if (type === "Text"){
    var value = data.value;%><%-prefix%>.value = <%-value%>;<%}
else if (type === "ReferData"){
    var referValue = data.value;
    var dataType = data.dataType;%><%-prefix%>.referValue = <%=referValue%>;<%}
else if (type === "Object"){
    var value = data.value;
    var objType = data.objType;%><%-prefix%>.value = <%=value%>;<%}
else if (type === "Data"){
    var values = data.value;
        for (var k in values){%>
    <%parseData(values[k], prefix +"['"+k+"']")
}
}
}%>


<%
function parseAgentData(agent, isCreateInstance, prefix){
if("Data" in agent){
    if(isCreateInstance){
%>
    <%-prefix%>.data = {};<%}
for (var d in agent.Data){
    var data = agent.Data[d];
    type = data.type;
    var name = data.name;
    if(type === "Data"){
        var base = data.base;
        var values = data.value
    if(isCreateInstance){%>
    <%-prefix%>.data['<%=name%>'] = new <%=base%>();
    <%}
    for (var k in values){
        parseData(values[k], prefix + ".data['"+name+"']"+"['"+k+"']")%>
<%}%>
<%}%>
<%}
}
}%>


<%function parseCourses(agent, ownerVarName, isCreateCourseInstance){
if("Courses" in agent){
%>var course;<%
  for (var c in agent.Courses){
        var cs = agent.Courses[c];
        var name = c;
        if(isCreateCourseInstance){
%>

    course = new Course(this, "<%-name%>");
    <%-ownerVarName%>.addCourse(<%-name%>);
    <%
            if("childs" in cs){
                for(var i = 0; i < cs.childs.length; i++){
                    var child = cs.childs[i];
                    parseChildCourses(ownerVarName, child, ownerVarName+"['"+name+"']");
                }
            }
        }else{%>
    course = <%-ownerVarName%>.courses['<%-name%>'];<%}
    if("signals" in cs){
        for(var i = 0; i < cs.signals.length; i++){
            var signal = cs.signals[i];
            var path = signal.path;
            if(signal.type === "Field"){
                var signalPath = signal.path.substr(0, signal.path.length-signal.name.length-1);%>
    <%-signalPath%>.signals.subscribeSignal('<%-signal.name%>', course);<%
            }else if(signal.type === "local"){
                var signalPath = signal.path.substr("AgentSignals".length); %>
    <%-ownerVarName%>.signals.subscribeSignal('<%-signal.name%>', course);<%
            }
        }
    }//end of signals
}%>
<%}
}%>


<%function parseChildCourses(owner, child, prefix) {
        var name = child.name;
        var type = child.type;
        %>
    course = new Course(<%-owner%>, '<%-name%>');
    <%-prefix%>.addCourse(course);
<%
    if("childs" in child){
        for(var i = 0; i < child.childs.length; i++){
            var ch = child.childs[i];
            parseChildCourses(owner, ch, prefix + "['" + name + "']");
        }
    }
}%>



<%function parseCourseActions(agent, prefix) {
   if("CourseActions" in agent){
       for (var ca in agent.CourseActions){
           var cAction = agent.CourseActions[ca];
            var retString = parseActionParams(cAction);
            if(retString === null)
                retString = "";
%>
<%-prefix%>.ca_<%-ca%> = function (<%-retString%>) {
};
<%
       }
   }
}%>



<%function parseActionParams(action){
    var retString = null;
    if("data" in action) {
        for(var d in action.data){
            var dName = d;
            if(retString === null)
                retString = dName.replace(/\s/g, '');
            else
                retString += ", " + dName.replace(/\s/g, '');
        }
    }
    if("FieldData" in action) {
        for(var d in action.FieldData){
            var dName = "fd_" + d;
            if(retString === null)
                retString = dName.replace(/\s/g, '');
            else
                retString += ", " + dName.replace(/\s/g, '');
        }
    }
    if("CourseActionSignals" in action) {
        for(var d in action.CourseActionSignals){
            var dName = "signal_" + d;
            if(retString === null)
                retString = dName.replace(/\s/g, '');
            else
                retString += ", " + dName.replace(/\s/g, '');
        }
    }
    return retString;
}%>