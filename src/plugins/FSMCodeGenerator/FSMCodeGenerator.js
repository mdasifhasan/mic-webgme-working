/*globals define*/
/*jshint node:true, browser:true*/

/**
 * Generated by PluginGenerator 1.7.0 from webgme on Thu Oct 06 2016 16:15:18 GMT-0500 (CDT).
 * A plugin that inherits from the PluginBase. To see source code documentation about available
 * properties and methods visit %host%/docs/source/PluginBase.template.
 */

define([
    'plugin/PluginConfig',
    'text!./metadata.json',
    'plugin/PluginBase',
    'common/util/ejs',
    'plugin/FSMCodeGenerator/FSMCodeGenerator/Templates/Templates',
    'q'
], function (PluginConfig,
             pluginMetadata,
             PluginBase,
             ejs,
             TEMPLATES,
             Q) {
    'use strict';

    pluginMetadata = JSON.parse(pluginMetadata);

    /**
     * Initializes a new instance of FSMCodeGenerator.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin FSMCodeGenerator.
     * @constructor
     */
    var FSMCodeGenerator = function () {
        // Call base class' constructor.
        PluginBase.call(this);
        this.pluginMetadata = pluginMetadata;
    };

    /**
     * Metadata associated with the plugin. Contains id, name, version, description, icon, configStructue etc.
     * This is also available at the instance at this.pluginMetadata.
     * @type {object}
     */
    FSMCodeGenerator.metadata = pluginMetadata;

    // Prototypical inheritance from PluginBase.
    FSMCodeGenerator.prototype = Object.create(PluginBase.prototype);
    FSMCodeGenerator.prototype.constructor = FSMCodeGenerator;

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(string, plugin.PluginResult)} callback - the result callback
     */
    FSMCodeGenerator.prototype.main = function (callback) {
        // Use self to access core, project, result, logger etc from PluginBase.
        // These are all instantiated at this point.
        var self = this,
            nodeObject,
            jsonModel,
            artifact;

        nodeObject = self.activeNode;

        self.loadNodeMap(nodeObject)
            .then(function (nodes) {
                self._nodes = nodes;

                jsonModel = self.getJSONModel(nodeObject);
                self.logger.info(JSON.stringify(jsonModel, null, 2));

                return self.generateArtifact(jsonModel);
            })
            .then(function (artifactHash) {
                self.result.addArtifact(artifactHash);
                self.result.setSuccess(true);
                callback(null, self.result);
            })
            .catch(function (err) {
                // Result success is false at invocation.
                self.logger.error(err.stack);
                callback(err, self.result);
            });

    };

    FSMCodeGenerator.prototype.getJSONModel = function (stateMachineNode) {
        var self = this,
            jsonModel = {
                name: self.core.getAttribute(stateMachineNode, 'name'),
                initialState: null,
                endStates: [],
                states: []
            },
            node,
            childrenIds = self.core.getChildrenPaths(stateMachineNode),
            i;

        for (i = 0; i < childrenIds.length; i += 1) {
            node = self._nodes[childrenIds[i]];
            if (self.core.isTypeOf(node, self.META['StateBase'])) {
                jsonModel.states.push(self.getStateData(node));
                if (self.core.isTypeOf(node, self.META['Initial'])) {
                    jsonModel.initialState = self.core.getPath(node);
                } else if (self.core.isTypeOf(node, self.META['End'])) {
                    jsonModel.endStates.push(self.core.getPath(node));
                }
            }
        }

        return jsonModel;
    };

    FSMCodeGenerator.prototype.getStateData = function (node) {
        var self = this,
            jsonState = {
                id: self.core.getPath(node),
                name: self.core.getAttribute(node, 'name'),
                transitions: []
            },
            transitionIds = self.core.getCollectionPaths(node, 'src'),
            transition,
            i;

        for (i = 0; i < transitionIds.length; i += 1) {
            transition = self._nodes[transitionIds[i]];
            jsonState.transitions.push({
                guard: self.core.getAttribute(transition, 'guard'),
                targetId: self.core.getPointerPath(transition, 'dst'),
                targetName: self.core.getAttribute(
                    self._nodes[self.core.getPointerPath(transition, 'dst')],
                    'name')
            });
        }
        return jsonState;
    };

    FSMCodeGenerator.prototype.loadNodeMap = function (node) {
        var self = this;
        // We need to keep a reference to our plugin instance, inside the callback
        // this no longer refers to the plugin instance.
        return self.core.loadSubTree(node)
            .then(function (nodeArr) {
                var nodes = {},
                    i;
                for (i = 0; i < nodeArr.length; i += 1) {
                    nodes[self.core.getPath(nodeArr[i])] = nodeArr[i];
                }

                return nodes;
            });
    };

    FSMCodeGenerator.prototype.generateArtifact = function (jsonModel) {
        var self = this,
            deferred = Q.defer(),
            language,
            artifact,
            filesToAdd = {},
            codeFileName,
            batchFileName;

        artifact = self.blobClient.createArtifact('result');
        filesToAdd['StateMachine.json'] = JSON.stringify(jsonModel, null, 2);
        filesToAdd['metadata.json'] = JSON.stringify({
            projectId: self.projectId,
            commitHash: self.commitHash,
            branchName: self.branchName,
            timeStamp: (new Date()).toISOString(),
            pluginVersion: self.getVersion()
        }, null, 2);

        for (language in TEMPLATES) {
            codeFileName = 'FSM-GeneratedCode/' + language + '/Program.' + TEMPLATES[language].extension;
            batchFileName = 'FSM-GeneratedCode/' + language + '/execute.bat';

            filesToAdd[codeFileName] = ejs.render(TEMPLATES[language].code, {stateMachine: jsonModel});
            filesToAdd[batchFileName] = ejs.render(TEMPLATES[language].batch, {stateMachine: jsonModel});

        }

        artifact.addFiles(filesToAdd, function (err) {
            if (err) {
                deferred.reject(new Error(err));
                return;
            }
            self.blobClient.saveAllArtifacts(function (err, hashes) {
                if (err) {
                    deferred.reject(new Error(err));
                    return;
                }

                deferred.resolve(hashes[0]);
            });
        });

        return deferred.promise;
    };

    return FSMCodeGenerator;
});
