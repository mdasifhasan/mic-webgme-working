/*globals define*/
/*jshint node:true, browser:true*/

/**
 * Generated by PluginGenerator 1.7.0 from webgme on Tue Oct 04 2016 10:09:25 GMT-0500 (CDT).
 * A plugin that inherits from the PluginBase. To see source code documentation about available
 * properties and methods visit %host%/docs/source/PluginBase.html.
 */

define([
    'plugin/PluginConfig',
    'text!./metadata.json',
    'plugin/PluginBase'
], function (
    PluginConfig,
    pluginMetadata,
    PluginBase) {
    'use strict';

    pluginMetadata = JSON.parse(pluginMetadata);

    /**
     * Initializes a new instance of FamilyTransformation.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin FamilyTransformation.
     * @constructor
     */
    var FamilyTransformation = function () {
        // Call base class' constructor.
        PluginBase.call(this);
        this.pluginMetadata = pluginMetadata;
    };

    /**
     * Metadata associated with the plugin. Contains id, name, version, description, icon, configStructue etc.
     * This is also available at the instance at this.pluginMetadata.
     * @type {object}
     */
    FamilyTransformation.metadata = pluginMetadata;

    // Prototypical inheritance from PluginBase.
    FamilyTransformation.prototype = Object.create(PluginBase.prototype);
    FamilyTransformation.prototype.constructor = FamilyTransformation;

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(string, plugin.PluginResult)} callback - the result callback
     */
    FamilyTransformation.prototype.main = function (callback) {
        // Use self to access core, project, result, logger etc from PluginBase.
        // These are all instantiated at this point.
        var self = this,
            nodeObject;


        // Using the logger.
        self.logger.debug('This is a debug message.');
        self.logger.info('This is an info message.');
        self.logger.warn('This is a warning message.');
        self.logger.error('This is an error message.');

        nodeObject = self.activeNode;

        self.loadNodeMap(nodeObject)
            .then(function (nodes) {
                self.logger.info('nodes:', nodes);

                var childrenPaths = self.core.getChildrenPaths(nodeObject);
                var hasViolations = false,
                    persons = [],
                    parents = [],
                    grandParents = [],
                    grandFathers = [];

                var ssns = {};

                for (var i = 0; i < childrenPaths.length; i += 1) {
                    var childNode = nodes[childrenPaths[i]];
                    var metaType = self.getMetaType(childNode);
                    self.logger.info(
                        self.core.getAttribute(childNode, 'name'),
                        'is of type',
                        self.core.getAttribute(metaType, 'name')
                    );

                    if (metaType === self.META.Person) {
                        persons.push(childNode);

                        var ssn = self.core.getAttribute(childNode, 'ssn');

                        if (ssns[ssn]) {
                            self.createMessage(childNode, 'Duplicate ssn "' + ssn + '" in family', 'error');
                            hasViolations = true;
                        } else {
                            ssns[ssn] = true;
                        }

                        if (self.hasParentLoops(childNode, nodes)) {
                            self.createMessage(childNode, 'Circular parent relationships found from node', 'error');
                            hasViolations = true;
                        }

                        if (self.isParent(childNode)) {
                            parents.push(childNode);

                            if (self.isGrandParent(childNode, nodes)) {
                                grandParents.push(childNode);

                                if (self.core.getAttribute(childNode, 'gender') === 'MALE') {
                                    grandFathers.push(childNode);
                                }
                            }
                        }
                    }

                }

                if (hasViolations) {
                    throw new Error('There violations of the well formedness rules, see details');
                }

                self.logger.info('Number of persons', persons.length);
                self.personsToNames(nodeObject, persons, 'Persons');
                self.personsToNames(nodeObject, parents, 'Parents');
                self.personsToNames(nodeObject, grandParents, 'GrandParents');
                self.personsToNames(nodeObject, grandFathers, 'GrandFathers');

                return self.save('FamilyTransformation updated model.');
            })
            .then(function () {
                self.result.setSuccess(true);
                callback(null, self.result);
            })
            .catch(function (err) {
                // Result success is false at invocation.
                callback(err, self.result);
            });
    };

    FamilyTransformation.prototype.hasParentLoops = function(personNode, nodes) {
        var self = this,
            originalPath = self.core.getPath(personNode),
            visitedConns = {};

        function followParentsRec(nodePath) {
            var result = false;

            var srcConns = self.core.getCollectionPaths(nodes[nodePath], 'src');
            for (var i = 0; i < srcConns.length; i += 1) {
                var connNode = nodes[srcConns[i]];

                if (visitedConns[srcConns[i]]) {
                    // Make sure we only visit a connection once to avoid endless loops.
                    return false;
                }

                visitedConns[srcConns[i]] = true;

                var targetPath = self.core.getPointerPath(connNode, 'dst');

                result = result || targetPath === originalPath || followParentsRec(targetPath);
            }

            return result;
        }

        return followParentsRec(originalPath);
    };


    FamilyTransformation.prototype.isParent = function (node) {
        var self = this;

        var dstConns = self.core.getCollectionPaths(node, 'dst');

        return dstConns.length > 0;
    };

    FamilyTransformation.prototype.isGrandParent = function (node, nodes) {
        var self = this,
            result = false;

        var dstConns = self.core.getCollectionPaths(node, 'dst');

        for (var i = 0; i < dstConns.length; i += 1) {
            var connNode = nodes[dstConns[i]];
            var srcPath = self.core.getPointerPath(connNode, 'src');
            if (self.isParent(nodes[srcPath])) {
                result = true;
                break;
            }
        }

        return result;
    };

    FamilyTransformation.prototype.loadNodeMap = function (node) {
        var self = this;

        return self.core.loadSubTree(node)
            .then(function (nodeArr) {
                var nodes = {},
                    i;
                for (i = 0; i < nodeArr.length; i += 1) {
                    nodes[self.core.getPath(nodeArr[i])] = nodeArr[i];
                }

                return nodes;
            });
    };

    FamilyTransformation.prototype.personsToNames = function (familyNode, personNodes, type) {
        var self = this;

        var namesNode = self.core.createNode({
            parent: self.rootNode,
            base: self.META.Names
        });

        self.core.setAttribute(namesNode, 'name', type + ' of ' + self.core.getAttribute(familyNode, 'name'));
        self.core.setRegistry(namesNode, 'position', {x: 500, y: 500});

        var i;
        for (i = 0; i < personNodes.length; i += 1) {
            var newNode = self.core.createNode({
                parent: namesNode,
                base: self.META.Name
            });

            self.core.setAttribute(newNode, 'name', self.core.getAttribute(personNodes[i], 'name'));
            self.core.setRegistry(newNode, 'position', self.core.getRegistry(personNodes[i], 'position'));
        }

    };

    return FamilyTransformation;
});